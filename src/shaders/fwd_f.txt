#version 450 core

out vec4 FragColor;
in vec3 FragPos;  
in vec3 Normal;  
in vec2 TexCoords;

layout(std140, binding = 0) uniform VPBlock{
    mat4 view;
    mat4 projection;
    vec4 viewPos;
};

layout(std140, binding = 1) uniform GIBlock{
    vec4 ambient;
};

uniform sampler2D diffuse;
uniform sampler2D specular;
uniform float shininess;

struct Light {
    vec4 position;  //w: intensity
    vec4 color;     //w: range
    vec4 direction; //w: spot angle
};


layout(std140, binding = 2) uniform point_block{
    Light pointlights[512];
};

layout(std140, binding = 3) uniform spot_block{
    Light spotlights[512];
};

layout(std140, binding = 4) uniform directional_block{
    Light directionals[8];
};


void main()
{
    // ambient
    vec3 f_ambient = ambient.xyz * texture(diffuse, TexCoords).rgb;
  	
    Light l0 = pointlights[0];

    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(l0.position.xyz - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    float intensity = l0.position.w; 
    vec3 f_diffuse = l0.color.xyz * intensity * diff * texture(diffuse, TexCoords).rgb;  
    
    // specular
    vec3 viewDir = normalize(viewPos.xyz - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    vec3 f_specular = l0.color.xyz * intensity * spec * texture(specular, TexCoords).rgb;  
        
    vec3 result = f_ambient + f_diffuse + f_specular;
    FragColor = vec4(result, 1.0);
}